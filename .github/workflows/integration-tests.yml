name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t arpwatch:test .
        docker tag arpwatch:test arpwatch:latest
    
    - name: Verify Docker image
      run: |
        docker images | grep arpwatch
        docker run --rm arpwatch:test echo "Image runs successfully"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=exporter --cov-report=xml
      continue-on-error: true
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v \
          --timeout=300 \
          --junitxml=test-results.xml \
          --cov=exporter \
          --cov-append \
          --cov-report=xml
      env:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
        TESTCONTAINERS_RYUK_DISABLED: "true"
        TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE: "/var/run/docker.sock"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'  # Only upload once
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-umbrella
    
    - name: Clean up Docker resources
      if: always()
      run: |
        docker-compose down -v --remove-orphans || true
        docker system prune -f
        docker volume prune -f

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'arpwatch:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r tests/requirements.txt
    
    - name: Build Docker image
      run: docker build -t arpwatch:test .
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --timeout=600
      env:
        TESTCONTAINERS_RYUK_DISABLED: "true"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/